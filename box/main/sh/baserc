export GOPATH="$HOME/golang"
export PATH=$HOME/.rvm/gems/ruby-2.1.0/bin:$HOME/bin:/usr/local/bin:$HOME/.rvm/bin:/usr/local/heroku/bin:$HOME/go_appengine:$HOME/golang/bin:/usr/local/sbin:$PATH
# export PATH=$PATH:/usr/local/opt/ruby/bin
export PATH=${PATH}:"/Users/sfishman/bin/FDK/Tools/osx"
export PATH="/Users/sfishman/pebble-dev/PebbleSDK-current/bin:$PATH"
# VMWare utility (vmrun)
export PATH="$PATH:/Applications/VMware Fusion.app/Contents/Library"

export JAVA_HOME=`/usr/libexec/java_home`

export EC2_HOME=/usr/local/ec2/ec2-api-tools-1.7.3.0
export EC2_URL=https://ec2.us-east-1.amazonaws.com
if [ -e $HOME/.bash_ec2_keys ]; then
    source $HOME/.bash_ec2_keys
fi
export PATH=$PATH:$EC2_HOME/bin

export WORKON_HOME=$HOME/.venvs/
export PROJECT_HOME=$HOME/Documents/
export PIP_REQUIRE_VIRTUALENV=true
export PIP_DOWNLOAD_CACHE=$HOME/.pip/cache

syspip(){
    PIP_REQUIRE_VIRTUALENV="" pip "$@"
}

reap(){
    sudo cp -r /Users/sfishman_old/"$@" ~/"$@"
    sudo chown -R sfishman ~/"$@"
}

gostart(){
    if [ -z "$1" ]; then
        echo "Provide project name!"
    fi

    full_proj_path="$GOPATH/src/github.com/samfishman/$1"
    mkdir -p "$full_proj_path"
    ln -s "$full_proj_path" "$1"
    cd "$1"
}

godel(){
    if [ -z "$1" ]; then
        echo "Provide project name!"
    fi

    full_proj_path="$GOPATH/src/github.com/samfishman/$1"
    del "$fullprojpath"
    del "$1"
}

source "/usr/local/bin/virtualenvwrapper.sh"

# Load RVM into a shell session *as a function*
[[ -s "$HOME/.rvm/scripts/rvm" ]] && source "$HOME/.rvm/scripts/rvm" 

# Initialization for FDK command line tools.Thu Jun 26 10:38:36 2014
export FDK_EXE="/Users/sfishman/bin/FDK/Tools/osx"

export TEXINPUTS="$TEXINPUTS:$HOME/Dropbox/Classes/CS121/Homework"

# OPAM configuration
. /Users/sfishman/.opam/opam-init/init.sh > /dev/null 2> /dev/null || true

# CS50 VM
path161="/Users/sfishman/Documents/Virtual Machines.localized/appliance50-fishman-cs161.vmwarevm/"
vmrun="vmrun -T fusion -gu jharvard -gp crimson"
ip161(){
    # TODO: get this to work
    # $vmrun getGuestIPAddress "$path161"
    echo 192.168.167.128
}
addr161(){
    echo jharvard@`ip161`
}
cs161(){
    if [ $# -eq 0 ]; then
        local command=connect
    else
        local command=$1
    fi

    if [ "$command" = "connect" ]; then
        vmrun list | grep "$path161" &> /dev/null

        if [ $? -eq 1 ]; then
            local shcmd="$vmrun start \"$path161\" nogui > /dev/null"
            echo $shcmd
            eval $shcmd
            local start_ec=$?
            if [ $start_ec -eq 0 ]; then
                echo "started VM, waiting for SSH"
                sleep 8
            else
                echo "ERROR STARTING VM"
                exit $start_ec
            fi
        else
            echo "VM already running"
        fi

        local shcmd="ssh jharvard@`ip161`"
        echo $shcmd
        eval $shcmd
        while [ $? -eq 255 ]; do
            sleep 1
            echo $shcmd
            eval $shcmd
        done
    elif [ "$command" = "start" -a -z "$2" ]; then
        local shcmd="$vmrun $command \"$path161\" nogui"
        echo $shcmd
        eval $shcmd
    else
        local shcmd="$vmrun $command \"$path161\" ${@:2}"
        echo $shcmd
        eval $shcmd
    fi
}
